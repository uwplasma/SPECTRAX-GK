{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SPECTRAX-GK","text":"<p>A differentiable, JAX-based solver for the multispecies Vlasov\u2013Poisson system in 1D1V, supporting Fourier\u2013Hermite and Discontinuous Galerkin (DG) discretizations.</p> <p> </p>"},{"location":"#why-spectrax-gk","title":"Why SPECTRAX-GK?","text":"<ul> <li>Two discretizations: Fourier\u2013Hermite (landau problems) &amp; DG-in-x + Hermite-in-v (robust nonlinearity)</li> <li>Linear &amp; nonlinear physics with multi-species coupling</li> <li>Units-aware inputs: time in \\(1/\\omega_p\\), length in \\(\\lambda_D\\), \\(T\\) in eV, drift as \\(u/c\\)</li> <li>Differentiable &amp; JIT-able via JAX</li> <li>Publication-quality diagnostics and example configs</li> <li>Modern workflow: Ruff (lint/format), MyPy (types), pytest (tests), pre-commit, CI/CD, auto docs</li> </ul> <p>\ud83d\udc49 New here? Start with the Quickstart.</p>"},{"location":"#at-a-glance","title":"At a Glance","text":"<p>We solve the Vlasov\u2013Poisson system [ \\frac{\\partial f_s}{\\partial t} + v \\frac{\\partial f_s}{\\partial x} + \\frac{q_s}{m_s} E(x,t) \\frac{\\partial f_s}{\\partial v} = 0, \\qquad \\frac{\\partial E}{\\partial x} = \\frac{1}{\\epsilon_0} \\sum_s q_s \\int f_s\\, dv. ]</p> <p>See the Physics page for the discretizations and normalization.</p>"},{"location":"dev_guide/","title":"Developer Guide","text":""},{"location":"dev_guide/#environment","title":"Environment","text":"<pre><code>git clone https://github.com/uwplasma/SPECTRAX-GK.git\ncd SPECTRAX-GK\npip install -e \".[dev]\"\npre-commit install\n````\n\n## Workflow\n\n* **Format/Lint**: `ruff format . &amp;&amp; ruff check .`\n* **Types**: `mypy .`\n* **Tests**: `pytest -v`\n\nPre-commit hooks run these checks automatically on commit.\n\n## Docs locally\n\n```bash\npip install mkdocs-material mkdocstrings[python] pymdown-extensions\nmkdocs serve\n</code></pre> <p>Open http://127.0.0.1:8000 in your browser.</p>"},{"location":"dev_guide/#contributing","title":"Contributing","text":"<ol> <li>Create a feature branch (e.g., <code>feature/new-thing</code>)</li> <li>Add tests &amp; docs</li> <li>Run all checks locally</li> <li>Submit a PR</li> </ol>"},{"location":"inputs/","title":"Inputs (TOML)","text":"<p>An example: ```toml [sim] mode = \"dg\"              # \"fourier\" or \"dg\" backend = \"diffrax\"      # \"eig\" or \"diffrax\" tmax = 10.0              # in units of 1/\u03c9_p (converted to seconds) nt = 200 nonlinear = true</p> <p>[grid] L_lambdaD = 64           # length in multiples of Debye length (\u03bb_D of a chosen species) Nx = 32 debye_species = \"e_plus\" # optional selector for \u03bb_D &amp; \u03c9_p</p> <p>[hermite] N = 24</p> <p>[bc] kind = \"periodic\"</p> <p>[[species]] name = \"e_plus\" q = -1.0 n0 = 0.5*1e19 mass_base = \"electron\"     # or \"proton\", scaled by mass_multiple mass_multiple = 1.0 temperature_eV = 1.0 drift_c = +0.1 ````</p>"},{"location":"inputs/#units-conversions","title":"Units &amp; Conversions","text":"<ul> <li><code>tmax</code>: multiples of \\(1/\\omega_p\\) \u2192 converted in <code>run</code> to seconds using the chosen debye species</li> <li><code>L_lambdaD</code>: multiples of \\(\\lambda_D\\) for that species \u2192 converted to meters</li> <li><code>temperature_eV</code>: converted to \\(v_{\\text{th}}\\) from \\(T\\) via \\(v_{\\text{th}}=\\sqrt{2k_BT/m}\\)</li> <li><code>drift_c</code>: \\(u_0 = (\\text{drift\\_c})\\, c\\)</li> <li>Densities <code>n0</code> read in SI (m\u207b\u00b3)</li> </ul> <p>You can also write safe arithmetic like <code>0.5*1e19</code> or <code>2*pi</code> in numeric fields; the loader sanitizes and evaluates them.</p>"},{"location":"install/","title":"Installation","text":""},{"location":"install/#from-pypi-recommended","title":"From PyPI (recommended)","text":"<pre><code>pip install spectraxgk\n````\n\n## From source (development)\n\n```bash\ngit clone https://github.com/uwplasma/SPECTRAX-GK.git\ncd SPECTRAX-GK\npip install -e \".[dev]\"\npre-commit install\n</code></pre>"},{"location":"install/#optional-jax-with-gpu","title":"Optional: JAX with GPU","text":"<p>Follow the official JAX instructions for your CUDA/CuDNN stack: https://github.com/google/jax#installation</p>"},{"location":"outputs/","title":"Outputs &amp; Diagnostics","text":"<p>The backend returns: - Fourier: <code>{\"C_kSnt\": (Nk,S,N,nt), \"Ek_kt\": (Nk,nt), \"k\": (Nk,) }</code> - DG: <code>{\"C_St\": (S,N,Nx,nt), \"E_xt\": (Nx,nt), \"x\": (Nx,) }</code></p> <p>Plots include: - Energy panel: per-species kinetic, field, total (log scale) - Electric field: \\(E(x,t)\\) heatmap - Per-species:   - Phase-mixing plot of \\(\\log |c_n(t)|\\)   - Animated \\(f(x,v,t)\\) (Hermite reconstruction)</p> <p>Tuning (TOML): ```toml [plot] nv = 257 vmin_c = -0.3 vmax_c = 0.3 fig_width = 10.0 fig_row_height = 2.2 fps = 30 dpi = 150</p>"},{"location":"outputs/#save_anim-outmp4","title":"save_anim = \"out.mp4\"","text":"<p>````</p>"},{"location":"physics/","title":"Physics &amp; Discretizations","text":""},{"location":"physics/#equations","title":"Equations","text":"<p>Vlasov\u2013Poisson in 1D1V for species \\(s\\): [ \\frac{\\partial f_s}{\\partial t} + v \\frac{\\partial f_s}{\\partial x} + \\frac{q_s}{m_s} E(x,t) \\frac{\\partial f_s}{\\partial v} = 0, ] [ \\frac{\\partial E}{\\partial x} = \\frac{1}{\\epsilon_0} \\sum_s q_s \\int f_s \\, dv. ]</p> <p>Here \\(f_s(x,v,t)\\) is the distribution, \\(q_s, m_s\\) charge &amp; mass.</p>"},{"location":"physics/#fourierhermite","title":"Fourier\u2013Hermite","text":"<p>Expand in Fourier (x) and orthonormal Hermite (v): [ f_s(x,v,t) \\approx f_{0,s}(v) + \\sum_{k,n} c_{k,n}^{(s)}(t)\\, e^{ikx}\\, \\phi_n(u), \\quad u = \\frac{v-u_{0,s}}{v_{\\text{th},s}}. ]</p> <p>Streaming and field operators become banded in \\(n\\), with coupling across species via \\(E_k\\): [ E_k(t) = \\frac{i}{k\\epsilon_0} \\sum_s q_s c^{(s)}_{k,0}(t), \\quad (k\\neq 0). ]</p> <p>Nonlinearity uses a pseudo-spectral product \\(E(x)\\,\\partial_v f\\) with de-aliasing (e.g. 2/3-rule).</p>"},{"location":"physics/#dghermite","title":"DG\u2013Hermite","text":"<ul> <li>DG in \\(x\\): upwind flux for advection \\(v \\partial_x f\\), periodic boundaries by default.</li> <li>Hermite in \\(v\\): the same orthonormal basis as above.</li> </ul> <p>The Poisson operator \\(P\\) satisfies \\(E = P\\,\\rho\\), built per boundary condition.</p>"},{"location":"physics/#energetics-diagnostics","title":"Energetics (diagnostics)","text":"<p>Kinetic energy for species \\(s\\) (Hermite proxy in orthonormal basis): [ \\mathcal{E}^{(s)}{\\text{kin}}(t) = \\frac{n \\int_0^L \\left[C_{0}^{(s)}(x,t) + \\sqrt{2}\\, C_{2}^{(s)}(x,t)\\right]\\, dx. ]} m_s v_{\\text{th},s}^2}{4\\sqrt{2}</p> <p>Field energy: [ \\mathcal{E}_{\\text{field}}(t) = \\int_0^L \\frac{E(x,t)^2}{2\\epsilon_0}\\, dx. ]</p> <p>The code computes these with the proper normalization constants (see <code>spectraxgk/diagnostics.py</code>).</p>"},{"location":"quickstart/","title":"Quickstart","text":"<p>Run a two-stream instability example:</p> <pre><code>spectraxgk --input examples/two_stream.toml\n````\n\nYou\u2019ll see console summaries (normalizations, grid, species) and a figure with:\n\n* Energy traces (per-species kinetic + field + total)\n* $E(x,t)$ heatmap\n* Per-species phase-mixing and animated $f(x,v,t)$\n\n&gt; Want to tweak? Open `examples/two_stream.toml`, then re-run the command.\n\n## Minimal Python API\n\n```python\nfrom spectraxgk.io_config import read_toml\nfrom spectraxgk.backends import run_fourier, run_dg\nfrom spectraxgk.plots import render_suite_onefigure\n\ncfg = read_toml(\"examples/two_stream.toml\")\nts, out = run_dg(cfg)  # or run_fourier(cfg)\nrender_suite_onefigure(cfg, ts, out)\n</code></pre>"},{"location":"api/","title":"API Reference","text":"<p>Thin wrappers to run either 'fourier' or 'dg' pipelines (multi-species only). Always return (ts, diag_dict) with keys used by the unified plots.</p> <p>One-figure plotting for 1D Vlasov\u2013Poisson (Fourier/DG), multi-species.</p> <p>Layout (always 2 columns):   Row 1:  [ Energy (per-species + field + total) | E(x,t) imshow ]   Row s+1 for each species s (s=1..S):           [ Phase mixing | Animated f_s(x,u,t) ]</p> <p>Diagnostics helpers for 1D Vlasov\u2013Poisson (Fourier/DG), multi-species.</p> This module centralizes <ul> <li>robust selection of k\u22480 slice</li> <li>E(x,t) reconstruction from Fourier (Ek_kt)</li> <li>field energy proxy \u27e8E^2\u27e9/2</li> <li>per-species kinetic energy proxies (from Hermite C0 and C2)</li> <li>convenience wrappers to build the complete energy row inputs</li> </ul> <p>All functions are lightweight and NumPy/JAX-friendly.</p> <p>````</p>"},{"location":"api/#spectraxgk.backends.resolve_kgrid","title":"<code>resolve_kgrid(grid, *, only_positive=False)</code>","text":"<p>Build k-grid from the periodic box: L, Nx (FFT frequencies).</p>"},{"location":"api/#spectraxgk.backends.run_dg","title":"<code>run_dg(cfg)</code>","text":"<p>Multi-species DG entry point. Returns:   ts, {     \"x\": x,                     # (Nx,)     \"E_xt\": E_xt,               # (Nx, nt)     \"C_St\": C_St,               # (S, N, Nx, nt)     \"C_t\": C_sum,               # (N, Nx, nt) species-summed (for diagnostics)   }</p>"},{"location":"api/#spectraxgk.backends.run_fourier","title":"<code>run_fourier(cfg)</code>","text":"<p>Multi-species Fourier\u2013Hermite entry point. Returns:   ts, {     \"k\": kvals,                 # (Nk,)     \"C_kSnt\": C_kSnt,           # (Nk, S, N, nt)     \"Ek_kt\": Ek_kt,             # (Nk, nt)   }</p>"},{"location":"api/#spectraxgk.plots.render_suite_onefigure","title":"<code>render_suite_onefigure(cfg, ts, out)</code>","text":"<p>Single figure with 2 columns and (1 + S) rows:   Row 1: [Energy panel | E(x,t) imshow]   Rows 2..S+1: one row per species: [Phase mixing | Animated distribution]</p> Assumes multi-species outputs <p>Fourier: out must contain C_kSnt (Nk,S,N,nt), Ek_kt (Nk,nt), k (Nk,) DG:      out must contain C_St (S,N,Nx,nt), E_xt (Nx,nt), x (Nx,)</p>"},{"location":"api/#spectraxgk.diagnostics.energies_dg_exact","title":"<code>energies_dg_exact(*, out, species_list, L, Nx)</code>","text":"<p>Exact energies for DG backend directly on x-grid. Returns species_energy, W_field, E_xt.</p>"},{"location":"api/#spectraxgk.diagnostics.energies_fourier_exact","title":"<code>energies_fourier_exact(*, out, species_list, L, Nx, x)</code>","text":"<p>Exact energies for Fourier backend by reconstructing to x:</p> <ul> <li>per-species kinetic:       W_kin_s(t) = (n0_s m_s vth_s^2 / (4\u221a2)) * \u222b dx (C0_s + \u221a2 C2_s)</li> <li>field:       W_field(t) = \u222b dx E(x,t)^2 / (2 \u03b50)</li> </ul> <p>Returns:</p> Name Type Description <code>species_energy</code> <code>list[tuple[str, ndarray]]</code> <p>list[(label, W_kin_s(t))]</p> <code>W_field</code> <code>ndarray</code> <p>(nt,)</p> <code>E_xt</code> <code>ndarray</code> <p>(Nx, nt)</p>"},{"location":"api/#spectraxgk.diagnostics.pick_k0_index","title":"<code>pick_k0_index(k)</code>","text":"<p>Return the index of the mode with the smallest |k|.</p>"},{"location":"api/#spectraxgk.diagnostics.reconstruct_E_xt_from_fourier","title":"<code>reconstruct_E_xt_from_fourier(Ek_kt, k, x)</code>","text":"<p>E(x,t) = Re[ sum_k E_k(t) e^{ikx} ]   Ek_kt: (Nk, nt), k: (Nk,), x: (Nx,)  -&gt; (Nx, nt)</p>"},{"location":"api/#spectraxgk.util.print_sim_summary","title":"<code>print_sim_summary(cfg)</code>","text":"<p>One place for the verbose simulation summary.</p>"},{"location":"api/#spectraxgk.util.print_units_banner","title":"<code>print_units_banner(cfg, sp_ref, idx_ref, omega_p, tmax_over_wp)</code>","text":"<p>Header lines about \u03c9p-based time normalization and optional Debye-length box length.</p>"}]}